{"version":3,"sources":["assets/searchIcon.png","App.js","reportWebVitals.js","index.js"],"names":["axios","require","useStyles","makeStyles","theme","root","flexGrow","title","paper","padding","btn","textTransform","appBar","backgroundColor","search","button","color","card","borderRadius","image","App","classes","useState","loading","setLoading","photos","setPhotos","id","setId","useEffect","className","AppBar","position","elevation","Toolbar","Box","ml","Typography","variant","Container","maxWidth","pt","Paper","p","display","flexDirection","alignItems","justifyContent","InputBase","size","placeholder","inputProps","onChange","v","e","id_","target","value","Button","onClick","create","headers","get","then","res","console","log","data","startIcon","Search","length","mt","src","searchIcon","width","Grid","container","spacing","map","i","m","item","xs","sm","md","lg","Skeleton","height","style","pho","border","borderColor","thumbnailUrl","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.635edd4a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/searchIcon.65eedb4b.png\";","import './App.css';\nimport searchIcon from './assets/searchIcon.png';\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Typography,\n  Box,\n  AppBar,\n  Toolbar,\n  Container,\n  Paper,\n  InputBase,\n  Button,\n  Grid\n} from \"@material-ui/core\";\nimport { Skeleton} from \"@material-ui/lab\";\nimport {\n  Search\n} from \"@material-ui/icons\";\n\nconst axios = require(\"axios\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: 15,\n  },\n  btn:{\n    textTransform:'capitalize'\n  },\n  appBar:{\n    backgroundColor:\"#2593C0\"\n  },\n \n  search:{\n    flexGrow:1\n  },\n  button:{\n    backgroundColor:\"#2593C0\",\n    color:\"#ffffff\",\n    textTransform:'capitalize'\n  },\n  card: {\n    borderRadius: 15,\n  },\n  image:{\n    borderRadius: 15,\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [loading,setLoading]=useState(false);\n  const [photos,setPhotos]=useState([]);\n  const [id,setId]=useState(null);\n\n  // get album photo by id \n\n  const getAlbumPhoto=()=>{\n    if(id!==null&&id!==0){\n      setLoading(true);\n    const searchInstance = axios.create(\n      {headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    }\n    );\n\n    searchInstance.get(\"https://challengethree.darasa.info/getAlbum.php?id=\"+id)\n    .then((res)=>{\n      console.log(res.data);\n      setPhotos(res.data);\n      setLoading(false);\n    });\n  }\n  }\n\n  useEffect(()=>{\n\n  },[]);\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.appBar} elevation={0}>\n        <Toolbar>\n          <Box className={classes.title} ml={2}>\n          \n              <Typography variant=\"h5\">Challenge 2</Typography>\n           \n          </Box>\n\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"sm\">\n      <Box pt={10}>\n            <Paper className={classes.paper}>\n              <Box p={0} display=\"flex\" flexDirection=\"column\">\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                <InputBase\n                className={classes.search}\n                size=\"small\"\n                placeholder=\"Search by Album Id\"\n                inputProps={{ 'aria-label': 'naked' }}\n                onChange={(v,e)=>{\n                  let id_=v.target.value;\n                  if(id_!==0){\n                    setId(id_);\n                  }else{\n                    setId(null);\n                  }\n                }}\n              /> \n              <Button\n              variant=\"contained\"\n              size=\"small\"\n              elevation={0}\n              className={classes.button}\n              onClick={getAlbumPhoto}\n\n              startIcon={<Search />}>\n              Get Photos By Id\n              </Button>\n                </Box>\n              </Box>\n             </Paper>\n             {loading===false&&photos.length===0&&(\n                 <Box mt={10} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                   <img src={searchIcon} width={320}/>\n                 </Box>\n                 )\n               }\n\n             <Box mt={5}>\n             <Grid container spacing={2}>\n\n               \n\n               {loading===true?\n               \n               [1,2,3].map((i,m)=>{ \n                 return(\n<Grid item xs={6} sm={6} md={6} lg={4}>\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  borderRadius={15}\n                  width={1}\n                >\n                  <Skeleton\n                    variant=\"rect\"\n                    height={150}\n                    width={\"100%\"}\n                    style={{ borderRadius: 15 }}\n                  />\n\n                  <Skeleton\n                    variant=\"text\"\n                    width={\"68%\"}\n                    style={{ borderRadius: 7 }}\n                  />\n                </Box>\n              </Grid>\n                 );\n               }\n               ):\n\n               photos.map((pho,i)=>{\nreturn(\n              <Grid item xs={6} sm={6} md={6} lg={4}>\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  flexDirection=\"column\"\n                >\n                 \n                    <Paper className={classes.card} elevation={0}>\n                      <Box\n                        height=\"150px\"\n                        width={1}\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                        alignItems=\"center\"\n                        flexDirection=\"column\"\n                        border={0}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.300\"\n                      >\n                        <img src={pho.thumbnailUrl} className={classes.image}/>\n                      </Box>\n                    </Paper>\n\n                  <Box mt={1}  display=\"flex\"\n                        justifyContent=\"center\"\n                        alignItems=\"center\"\n                        flexDirection=\"column\">\n                    <Typography m={2} style={{fontSize:\"12px\"}} color=\"inherit\">{pho.title}</Typography>\n                  </Box>\n                </Box>\n              </Grid>\n);\n         \n               })\n\n              }\n             \n          \n              </Grid>\n           \n             </Box>\n       </Box >\n\n      </Container>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}